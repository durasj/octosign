trigger:
- master

strategy:
  matrix:
    linux:
      imageName: 'ubuntu-18.04'
    mac:
      imageName: 'macOS-10.14'
    windows:
      imageName: 'windows-2019'

pool:
  vmImage: $(imageName)

steps:
- checkout: self 
  submodules: true

- task: InstallAppleCertificate@2
  inputs:
   certSecureFile: 'mac.p12'
   certPwd: '$(MACP12PASSWORD)'
   keychain: 'temp'
   deleteCert: true
  condition: and(eq( variables['sign'], true ), eq( variables['Agent.OS'], 'Darwin' ))
  displayName: Install Apple Signing Certificate

- task: DownloadSecureFile@1
  name: signingCertificate
  condition: and(eq( variables['sign'], true ), ne( variables['Agent.OS'], 'Darwin' ))
  displayName: 'Download Windows & Linux Signing certificate'
  inputs:
    secureFile: 'windows.pfx'

- task: NodeTool@0
  inputs:
    versionSpec: '12.x'
  displayName: 'Install Node.js'

# There should be ENV variables like "JAVA_HOME_11_X64" see https://github.com/microsoft/azure-pipelines-tasks/blob/a24321075eae67b13d0865e4199d5ef82d3effca/Tasks/Common/java-common/java-common.ts#L45
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'echo "##vso[task.setvariable variable=JAVA_HOME;]$JAVA_HOME_11_X64"'
  displayName: 'Set JAVA_HOME to JDK v11'
- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo "JAVA_HOME=$JAVA_HOME"
      java -version
  condition: eq(variables['System.Debug'], true)
  displayName: 'DEBUG: Show java home and version'

# Temporary disabled caching due to issues on Mac and Linux (executable permissions?)
# https://github.com/durasj/octosign/issues/4
# We should cache ~/.npm and ~/.cache instead of node_modules as those are cypress and npm caches
#- task: CacheBeta@0
#  inputs:
#    key: |
#      $(Agent.OS)
#      $(Build.SourcesDirectory)/package-lock.json
#    path: '$(Build.SourcesDirectory)/node_modules'
#  displayName: 'Cache node_modules'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'npm install'
  displayName: 'Install node modules'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'yarn build:translations'
  displayName: 'Build translations'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'yarn test'
  displayName: 'Test'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'yarn test:ui'
  env:
    PERCY_TOKEN: $(PERCY_TOKEN)
  displayName: 'Test UI'
  condition: eq(variables['Agent.OS'], 'Linux')

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'yarn build'
  displayName: 'Build'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'yarn build:backends'
  displayName: 'Build backends'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: yarn dist
  env:
    GH_TOKEN: $(GH_TOKEN)
    CSC_LINK: $[signingCertificate.secureFilePath]
    CSC_KEY_PASSWORD: $(WINPFXPASSWORD)
  displayName: 'Create and upload distributables'

# We are currently not able to run smoke test on the Linux
# https://github.com/durasj/octosign/issues/11
#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: sudo apt-get update && sudo apt-get install libgconf-2-4 -y
#  condition: eq(variables['Agent.OS'], 'Linux')
#  displayName: 'Prepare Linux for smoke test'
#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: 'xvfb-run --auto-servernum --server-args="-screen 0, 1600x900x24" "npm run test:smoke"'
#  displayName: 'Run smoke test'
#  condition: eq(variables['Agent.OS'], 'Linux')

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: 'yarn test:smoke'
  displayName: 'Run smoke test'
  condition: ne(variables['Agent.OS'], 'Linux')

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: npx codecov --disable=gcov
  env:
    CODECOV_TOKEN: $(CODECOV_TOKEN)
  condition: eq(variables['Agent.OS'], 'Linux')
  displayName: 'Upload code coverage'
